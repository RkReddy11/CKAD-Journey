Docker Networks:

Docker networks are virtual networks that allow containers to communicate with each other and with external networks.
By default, Docker provides three types of networks: bridge, host, and overlay.
Bridge network: This is the default network created when Docker is installed. Containers connected to the bridge network can communicate with each other using container names as hostnames.
Host network: With the host network, containers share the network namespace with the host system. They can directly access ports on the host system without requiring port mapping.
Overlay network: Overlay networks enable communication between containers running on different Docker hosts or nodes in a swarm cluster.
Connecting and Communicating Containers:

Container-to-Container Communication on the Same Network:

When containers are connected to the same Docker network, they can communicate with each other using their container names as hostnames. Docker provides automatic DNS resolution for containers connected to the same network.
For example, if you have two containers named "container1" and "container2" on the same Docker network, "container1" can communicate with "container2" by using "container2" as the hostname.
Container-to-Container Communication on Different Networks:

If containers are connected to different networks, they cannot communicate directly using container names as hostnames.
However, you can connect containers from different networks by creating a shared network or by using network aliases.
Creating a shared network: You can create a new network and connect containers from different networks to that shared network. This allows them to communicate with each other using their container names as hostnames within the shared network.
Using network aliases: You can assign network aliases to containers to enable communication between containers on different networks. A network alias allows a container to have multiple network identities or hostnames, which can be used for inter-container communication.
Container-to-External Network Communication:

Containers can also communicate with external networks, such as the host network or the internet.
By default, containers are isolated from the host network. To enable communication with the host network, you can use port mapping to expose container ports to the host.
For internet access, you can configure port mapping to expose container ports to the external network.
Docker provides a flexible and scalable networking model that allows containers to connect and communicate with each other as well as with external networks. By leveraging Docker networks, you can easily build and manage interconnected containerized applications.


To create a new network named "wp-mysql-network" using the bridge driver, allocate the subnet 182.18.0.1/24, and configure the gateway as 182.18.0.1, you can use the following command:

docker network create --driver bridge --subnet 182.18.0.0/24 --gateway 182.18.0.1 wp-mysql-network
Let's break down the command:

docker network create: This command is used to create a new Docker network.
--driver bridge: This option specifies the network driver to use. In this case, we're using the bridge driver, which is the default network driver.
--subnet 182.18.0.0/24: This option specifies the subnet to allocate for the network. The subnet 182.18.0.0/24 provides a range of IP addresses from 182.18.0.1 to 182.18.0.254.
--gateway 182.18.0.1: This option sets the gateway IP address for the network to 182.18.0.1.
wp-mysql-network: This is the name of the network we're creating, which is "wp-mysql-network" in this case.
By running this command, Docker will create a new network named "wp-mysql-network" using the bridge driver. The network will have the subnet 182.18.0.0/24 allocated, with the gateway configured as 182.18.0.1. This network can be used for connecting containers and enabling communication between them.

Please note that the specified subnet and gateway should be chosen carefully to avoid conflicts with other networks or IP addresses in your environment.

To deploy a MySQL database using the mysql:5.6 image, name it mysql-db, and attach it to the wp-mysql-network network with the database password set to db_pass123, you can use the following command:

docker run -d --name mysql-db --network wp-mysql-network -e MYSQL_ROOT_PASSWORD=db_pass123 mysql:5.6

Let's break down the command:

docker run: This command is used to run a Docker container.
-d: It runs the container in the background (detached mode).
--name mysql-db: This option sets the name of the container as mysql-db.
--network wp-mysql-network: This option attaches the container to the wp-mysql-network network that was created earlier.
-e MYSQL_ROOT_PASSWORD=db_pass123: This option sets the environment variable MYSQL_ROOT_PASSWORD to db_pass123, which is the password for the MySQL root user.
mysql:5.6: This is the name and version tag of the Docker image to run. In this case, it's the official MySQL 5.6 image from Docker Hub.
By running this command, Docker will pull the MySQL 5.6 image (if it's not already available locally), create a new container named mysql-db based on that image, attach it to the wp-mysql-network network, and set the root password to db_pass123. The container will be running in the background in detached mode.

Now you have a MySQL database container named mysql-db connected to the wp-mysql-network network, ready for use with the specified root password.

To deploy a web application named "webapp" using the kodekloud/simple-webapp-mysql image, exposing the port 38080 on the host, and linking it to the MySQL container, you can use the following command:

docker run -d --name webapp --network wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:80 --link mysql-db:mysql kodekloud/simple-webapp-mysql

Let's break down the command:

docker run: This command is used to run a Docker container.
-d: It runs the container in the background (detached mode).
--name webapp: This option sets the name of the container as webapp.
--network wp-mysql-network: This option attaches the container to the wp-mysql-network network that was created earlier.
-e DB_Host=mysql-db -e DB_Password=db_pass123: These options set the environment variables DB_Host and DB_Password with the specified values. These variables are used by the web application to connect to the MySQL database.
-p 38080:80: This option maps port 38080 on the host to port 80 in the container. This allows accessing the web application from the host machine using port 38080.
--link mysql-db:mysql: This option links the mysql-db container (MySQL) to the webapp container, allowing them to communicate with each other. The linked container's information, such as IP address and environment variables, is made available to the webapp container.
By running this command, Docker will pull the kodekloud/simple-webapp-mysql image (if it's not already available locally), create a new container named webapp based on that image, attach it to the wp-mysql-network network, set the required environment variables, and link it with the mysql-db container. The container will be running in the background in detached mode, and the web application will be accessible from the host machine at http://localhost:38080.

Now you have a web application container named webapp connected to the wp-mysql-network network, with the required environment variables set and linked to the MySQL container.



